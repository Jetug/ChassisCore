buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

version = '1.2.3-1.18.2'
group = 'com.jetug.armorpunk'
archivesBaseName = 'armorpunk'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'power_armor_mod'

            arg "-mixin.config=power_armor_mod.mixin.json"

            mods {
                power_armor_mod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'power_armor_mod'

            arg "-mixin.config=power_armor_mod.mixin.json"

            mods {
                power_armor_mod {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'power_armor_mod'

            mods {
                power_armor_mod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'power_armor_mod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                power_armor_mod {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.54')

    implementation fileTree('libs') { include '*.jar' }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    testAnnotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    add sourceSets.main, "power_armor_mod.mixin-refmap.json"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "power_armor_mod",
                "Specification-Vendor"    : "power_armor_modsareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "power_armor_modsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TweakClass"              : "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder"              : 0,
                "MixinConfigs"            : "power_armor_mod.mixin.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file://${project.projectDir}/mcmodsrepo"
//        }
//    }
//}
//
//tasks.withType(JavaCompile).configureEach {
//    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
//}

tasks.register('generateCode') {
    doLast {
        def directoryPath = "src/main/resources/assets/power_armor_mod/animations"
        def animationsTag = "animations"
        File directory = new File(directoryPath)
        File[] files = directory.listFiles()

        if (files) {
            files.each { file ->
                if (file.isFile() && file.name.endsWith(".json")) {
                    def className = generateClassName(file.name)
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def json = jsonSlurper.parse(file)
                    generateClassFile(className, json[animationsTag] as Map)
                    println "Generated code has been written to $className"
                }
            }
        } else {
            println "No JSON files found in the specified directory."
        }
    }
}

static String generateClassName(String fileName) {
    def className = fileName.replaceAll(/(\.[^.]+)$/, "").tokenize('_.')
    def capitalizedWords = className.collect { it.capitalize() }
    return capitalizedWords.join()
}

static void generateClassFile(String className, Map json) {
    def generatedDir = "src/main/java/com/jetug/power_armor_mod/generated/"
    def packageName = "com.jetug.power_armor_mod.generated"
    String constantsSection = generateConstantsSection(json)
    String generatedCode = """ package ${packageName};

public class ${className} {\n${constantsSection}}"""
    new File("${generatedDir}${className}.java").text = generatedCode
}

static String generateConstantsSection(Map json) {
    StringBuilder constantsSection = new StringBuilder()

    json.each { key, value ->
        constantsSection.append("    public static final String ${key.toUpperCase().replaceAll("\\s+|\\.", "_")} = \"${key}\";\n")
    }

    return constantsSection.toString()
}

compileJava {
    finalizedBy generateCode
}

